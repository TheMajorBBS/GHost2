; Ini files are used to configure the door games that you'd like available on the various menus
; An example configuration block would be:
;
; [DOOR]
; Name=Legend Of the Red Dragon
; Command=doors\lord\start.bat
; Parameters=*NODE
; Platform=DOSBox
; Authorization=+[default] -BadOPCode
; Native=False
; ForceQuitDelay=5
; WatchDTR=True
; WindowStyle=Minimized
; ClearScreenBefore=False
; ClearScreenAfter=False
;
; The [DOOR] line must appear exactly as is (don't call it [LORD] or something like that)
; The Name= line is what will be displayed to the user when using the 'canned' menus.  
;     It will also be displayed in the admin interface
; The Command= line is what will be executed to run the door.  
;     This should be the path (absolute, or relative to the GHost directory) and filename of the command to execute.  
;     Don't include command-line parameters here, they come next
; The Parameters= line contains the optional parameters to pass to the door.  
;     This can be hardcoded values, or command-line specifiers (see below for a full list)
; The Platform= line contains the specific platform to run the door with. This refers to the file name of the ini in the platforms directory.
;     Parameter is optional, if not specified than system will try to guess the platform to use with compatible logic with GameSrv.
; The Authorization= line specifies the user access. [default] is for anyone not specifically on list.
;     + grants rights and allows the user to run the door.
;     - revokes rights and won't allow user to run the door.
; The Native= is ignored but can be specified for GameSrv door.ini compatibility.
; The ForceQuitDelay= line controls how long (in seconds) GHost will wait for the door to terminate after a hangup event
;     If the user hangs up while in a door, GHost will detect that and wait up to this many seconds for the door to gracefully terminate
;     If the door doesn't terminate after this many seconds, it will be force-quit to ensure the node isn't locked up indefinitely
; The WatchDTR= line controls whether GHost will watch for (and honour) DTR drops by the door
;     If you want GHost to disconnect the user if the door drops DTR, then set this to true
;     If you want GHost to keep the user connected if the door drops DTR, then set this to false
;     The default is true, but if for example you want to run a BBS from within GHost, then you'll probably want to set this to
;     false so the user returns to GHost after the BBS quits.
;     NOTE: This setting only applies when running 16bit doors on 32bit Windows
; The WindowStyle= line controls how the output of the door is displayed.  
;     Valid options (which should be self explanatory) are:
;       Hidden, Minimized, Normal, Maximized
;     Using an invalid option will cause the external to fail to run.  CASE IS IMPORTANT so use exactly as typed above
; The ClearScreenBefore= line tells GHost/2 to clear the client connection screen before running the door.
; The ClearScreenAfter= line tells GHost/2 to clear the client connection screen after running the door.
;
; ***NOTE***: Other settings that you may see in the INI is just meta data optimizations you should never attempt to set.
;
; Valid command-line specifiers are below (see the footnote for an important security note)
; *ALIAS - ***The user's alias
; *DOOR32 - Full path\filename to the door32.sys drop file
; *DOORSYS - As above, for door.sys
; *DOORFILE - As above, for doorfile.sr
; *DORINFO - As above, for dorinfo.def (no node number in filename)
; *DORINFO1 - As above, for dorinfo1.def (filename always contains 1, no matter which node)
; *DORINFOx - As above, for dorinfox.def (where x is the current node number)
; *HANDLE - The connection's socket handle (deprecated; may be removed in future versions)
; *IPADDRESS - The remote user's ip address
; *MINUTESLEFT - The number of minutes the user has remaining (ie 5 minutes 10 seconds will report as "5")
; *NODE - The current node
; *PASSWORD - ***The user's password (by default this will be the hash, unless you disabled hashing in GHost.ini in which case it'll be the actual password)
; *SECONDSLEFT - The number of seconds the user has remaining (ie 5 minutes 10 seconds will report as "310")
; *SOCKETHANDLE - Same as *HANDLE
; *USERNAME - Same as *ALIAS
; Anything in the newuser.ini file - ***For example if you have an [Email] entry in newuser.ini, you can use *EMAIL to pass that on the command-line.
;
; IMPORTANT SECURITY NOTE: Items marked with an *** are USER PROVIDED, which means a malicious user could mess with your system.  So to use those, you'll actually
; have to use three asterisks instead of just one (ie ***ALIAS instead of just *ALIAS).  My hope is that people will run into problems when they try to use *ALIAS,
; which will then force them to read this important note before they can potentially harm their system.
;
; So what's so dangerous about the user provided parameters?  Well let's say you wanted to pass the user's Alias to a program on the command-line by specifying 
; Command=START.BAT and Parameters=***ALIAS.  If I sign in, this will translate to:
; START.BAT Ree
;
; But what if someone by the name of 'Im a douche > C:\Windows\Explorer.exe' tries to run the program?  This will happen:
; START.BAT Im a douche > C:\Windows\Explorer.exe
;
; So now whatever START.BAT does will be piped into C:\Windows\Explorer.exe -- Windows probably won't allow that since it's in use, but I think you get the idea.
;
; This brings up another good point -- even non-malicious users may cause problems if they have a space in their name for instance, so you'll want to quote the user
; provided parameters.  IE instead of using Parameters=***ALIAS, use Parameters="***ALIAS"
;
; A malicious user could still register as 'Im a douche" > "C:\Windows\Explorer.exe', resulting in:
; START.BAT "Im a douche" > "C:\Windows\Explorer.exe"
;
; So I still highly recommend against using the user provided parameters.  I'll try to think of a way to make them safer, but aside from restricting the allowable
; characters (which makes them useless IMO) I can't think of anything.
;
; (Anybody who worked with SQL before parameterized queries came along will probably be experiencing deja-vu right about now!)